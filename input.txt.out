slComment   -> // Example for testing all tokens
mlComment   -> /*
  Multi-line comment
  Testing variables, loops, conditionals, and functions
*/
VARIABLE    -> ingredient
IDENTIFIER  -> x
ops         -> =
INTEGER     -> 42
DELIMITER   -> ;
VARIABLE    -> ingredient
IDENTIFIER  -> y
ops         -> =
INTEGER     -> 4
DELIMITER   -> ;
CONST       -> fixed
IDENTIFIER  -> greeting
ops         -> =
talk        -> "Hello, World!"
DELIMITER   -> ;
FUNCTION    -> fun
IDENTIFIER  -> calculate
DELIMITER   -> (
IDENTIFIER  -> a
DELIMITER   -> ,
IDENTIFIER  -> b
DELIMITER   -> )
DELIMITER   -> {
IF          -> really
DELIMITER   -> (
IDENTIFIER  -> a
ops         -> <
IDENTIFIER  -> b
DELIMITER   -> )
DELIMITER   -> {
PRINT       -> show
talk        -> "a is less than b"
DELIMITER   -> ;
DELIMITER   -> }
ELSE_IF     -> notReal
DELIMITER   -> (
IDENTIFIER  -> a
ops         -> =
ops         -> =
IDENTIFIER  -> b
DELIMITER   -> )
DELIMITER   -> {
PRINT       -> show
talk        -> "a is equal to b"
DELIMITER   -> ;
DELIMITER   -> }
ELSE        -> real
DELIMITER   -> {
PRINT       -> show
talk        -> "a is greater than b"
DELIMITER   -> ;
DELIMITER   -> }
RETURN      -> goBack
IDENTIFIER  -> a
ops         -> +
IDENTIFIER  -> b
DELIMITER   -> ;
DELIMITER   -> }
ARRAY       -> cluster
IDENTIFIER  -> values
ops         -> =
DELIMITER   -> [
INTEGER     -> 5
DELIMITER   -> ,
INTEGER     -> 10
DELIMITER   -> ,
INTEGER     -> 15
DELIMITER   -> ]
DELIMITER   -> ;
FOR         -> go
DELIMITER   -> (
IDENTIFIER  -> int
IDENTIFIER  -> i
ops         -> =
INTEGER     -> 0
DELIMITER   -> ;
IDENTIFIER  -> i
ops         -> <
IDENTIFIER  -> values
DELIMITER   -> .
IDENTIFIER  -> length
DELIMITER   -> ;
IDENTIFIER  -> i
ops         -> +
ops         -> +
DELIMITER   -> )
DELIMITER   -> {
PRINT       -> show
talk        -> "Value:"
DELIMITER   -> ;
PRINT       -> show
IDENTIFIER  -> values
DELIMITER   -> [
IDENTIFIER  -> i
DELIMITER   -> ]
DELIMITER   -> ;
WHILE       -> asLongAs
DELIMITER   -> (
IDENTIFIER  -> values
DELIMITER   -> [
IDENTIFIER  -> i
DELIMITER   -> ]
ops         -> >
INTEGER     -> 8
DELIMITER   -> )
DELIMITER   -> {
BREAK       -> end
DELIMITER   -> ;
DELIMITER   -> }
CONTINUE    -> goOn
DELIMITER   -> ;
DELIMITER   -> }
MAIN        -> imp
IDENTIFIER  -> main
DELIMITER   -> (
DELIMITER   -> )
DELIMITER   -> {
INCLUDE     -> involve
ops         -> <
IDENTIFIER  -> stdio
DELIMITER   -> .
IDENTIFIER  -> h
ops         -> >
TRY         -> testing
DELIMITER   -> {
VARIABLE    -> ingredient
IDENTIFIER  -> name
ops         -> =
talk        -> "User"
DELIMITER   -> ;
PRINT       -> show
IDENTIFIER  -> greeting
DELIMITER   -> ;
SCANF       -> scan
talk        -> "%s"
DELIMITER   -> ,
ops         -> &
IDENTIFIER  -> name
DELIMITER   -> ;
PRINT       -> show
talk        -> "Welcome, "
ops         -> +
IDENTIFIER  -> name
DELIMITER   -> ;
DELIMITER   -> }
CATCH       -> hold
DELIMITER   -> (
EXCEPTION   -> variety
IDENTIFIER  -> ex
DELIMITER   -> )
DELIMITER   -> {
PRINT       -> show
talk        -> "An error occurred!"
DELIMITER   -> ;
DELIMITER   -> }
SUCCESS     -> yay
INTEGER     -> 0
DELIMITER   -> ;
DELIMITER   -> }
